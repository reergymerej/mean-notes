todo
=========================================
view categories in db

notes
=========================================
How is data for Articles being pulled?

In ArticlesController, $scope.find is called.  This populates $scope.articles with the results from Articles.query.

What is Articles and what does query() do?

	Articles is injected into the controller.  Where is it defined?

		/public/js/services/articles.js

	Articles is a factory service.  It's hard to figure out what type of provider to use, so I'll just remember that they're using a factory for this.

	It uses $resource, a higher level abstraction for $http.
		http://docs.angularjs.org/api/ngResource/service/$resource
	
	The Articles factory will return the result of calling $resource().  That result will allow us to perform CRUD stuff like get, save, and query.

	Here's a breakdown of $resource's arguments.

	$resource(
		// url
		'someurl'
	
		// param defaults (optional)
		{ param: 'defaults'},
	
		// actions (optional)
		{ update: { method: 'PUT' } }
	);

Let's play with the $resource methods.  

	First we have to create a service in /public/js/services.

	Add the reference to /app/views/includes/foot.html.  Restart the server.  Now our service is loaded, but it's not being injected anywhere.

	Inject our service into our controller.

	In the controller, use our factory to call different methods of $resource.

		It looks like subsequent GETs don't do anything if the first one got a 404 as long as the request is the same.  If the url params are different, both requests will go through.  Repetitive POSTs with the same data still go through.

		url params that match tokens in the $resource's path are plugged into the url.

			// service
			$resource('foo/:bar/:baz'
				...
			);

			// controller
			TheFactory.get({
				bar: 111,
				baz: 222
			}, 
				...
			);

			// GET to foo/111/222

			// controller
			TheFactory.get({
				baz: 222
			}, 
				...
			);

			// GET to foo/222

		What is the '@_id' in the $resource?  This is used to look up values in the data being sent in the request to help build the url.
		http://stackoverflow.com/a/17560529/1319850

		example:

			$resource('foo/:bar', {
				{
					bar: '@potato'
				}
			});

			// This POSTs a and b to 'foo'.
			TheFactory.save(
				{
					a: 1,
					b: 2
				}
			);

			// This POSTs a and b to 'foo/666'.
			TheFactory.save(
				{
					a: 1,
					b: 2,
					potato: 666
				}
			);

		The reason the MEAN example uses '@_id' is because the objects, once they're hooked up to a service, will be created by MongoDB, which gives all objects the _id field.

================================================
OK, we're requesting data.  Now to the server.
================================================

Obviously, we're getting a 404 because there's no router for 'categories' set up by Express.  Let's create one.

How is the request for 'arcticles' being handled?  We'll use that as our example.

Where is it?
	The router is set up as a node module.  /app/routes/articles.js

Create our own (save-as).  Will node pick it up automatically?

	Node picked up the new file automatically.
	Comment out all the authorization stuff.
	Copy the first get and comment out the other stuff.
	Change the path to /categories - keep the template - and verify it all works.
	Grunt saw the change and automatically restarted the server.  Thanks, Grunt!  Now our request is returning all the articles.  :|

	How can we change the view being returned?
		The "view" seems to actually be a method in the articles controller. /app/controllers/articles.js
	
		In the controller's module, the "all" method is being executed when the route is matched.

		This method uses Article (a mongoose model) to find all the articles, sort, populate (?), and exec.  I'm not sure what populate and exec do, but we'll figure that out when we get to MongoDB.

		In the callback for exec, all the articles are passed.  If there's no error, the response is rendered using jsonp.

		Change the param passed to jsonp to a JS object and refresh browser.  Vioala.  We're returning hardcoded JSON.

	Let's add a stub for our stuff.
		Create a controller in /app/controllers/

	Change the controller referenced in our router to this one.  Change it in the exports after importing it like articles is imported.

	Create a model for Mongoose to use.
		model name is singular and capitalized
		Can we just copy what Article did - pass a string?

		nope - throw new mongoose.Error.MissingSchemaError(name);

		Where the hell is this model defined?
		/app/models/article.js

		save-as article.js
		change all the article refs to category
		At the end, the model is registered with mongoose.

		restart server - all good

	Where are we?
		Angular
			requests '/categories'

		Express
			router
				catches request, executes controller's "all" method
			controller
				uses mongoose Category model to find records
				returns results as JSON

		Angular
			receives JSON

	Change controller to use our new model.
		/app/controllers/articles.js

	Change the hardcoded nonsense to use the result from querying our new model.  Everything looks good.  The request now successfully returns nothing.

================================================
Stuff in Some Data
================================================

OK, we have to add some data to verify it can be pulled.

Let's interact with MongoDB directly.

Start up another terminal.
	Can we just start it anywhere or do we need to use some sort of instance specific to this app?  Mongo stores everything as documents, so it may be localized.

	How do we start mongo?
		in terminal: mongo
		show dbs

	What db is this app using?
		judging by /config/env/development.js, we're using mean-dev

	This db shows up in the list, so I guess that answers the question about localized data.  Come to think of it, I remember having to specify some global path for the data.

	Let's verify that we are looking at the right thing.

	select the db
		use mean-dev

	How show data in db?
		show collections

	show documents in the collection
		db.articles.find()

	How about adding something to our new collection?
		It's not listed in the collections yet, but we should be able to just add to it and it will be created.

	// http://docs.mongodb.org/manual/reference/mongo-shell/

		db.categories.insert({
			foo: 'bar'
		});

		// the collection was created
		show collections;

Does this show up in our app now?
	yeah, baby

Generate a few records so we can display them on the front-end.
	
	for (var i = 0; i < 6; i++) {
		db.categories.insert({ title: 'some title #' + 1 });
	}

	db.cagetories.find().pretty();

Data is now being sent to the front end from our db.  Stop playing around with all these toys - there will be time later - and get back to Angular.

================================================
How is Angular handling the response for the articles?
================================================

The callback for the resource factory's "query" method just assigns the callback's arg to the scope.  When I log it to the console, there are other things in there.  

	How is the view using this scope variable?  
		It's just a regular ngRepeat.  I guess ngRepeat doesn't iterate over the $promise and $resolved objects.

	** cool trick #sublime:  double-click in the black space near the tabs to create a new file

	Why do they use the hash-bang before the link to the article?

================================================
Show individual category.
================================================





================================================
What's the route of the DELETE for articles?


What are the states all about?  /public/js/config.js
	$stateProvider

How does $stateParams know what to assign the id in the url to?
	Where does $stateParams come from?
	
