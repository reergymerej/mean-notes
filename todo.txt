todo
=========================================
view categories in db

notes
=========================================
How is data for Articles being pulled?

In ArticlesController, $scope.find is called.  This populates $scope.articles with the results from Articles.query.

What is Articles and what does query() do?

	Articles is injected into the controller.  Where is it defined?

		/public/js/services/articles.js

	Articles is a factory service.  It's hard to figure out what type of provider to use, so I'll just remember that they're using a factory for this.

	It uses $resource, a higher level abstraction for $http.
		http://docs.angularjs.org/api/ngResource/service/$resource
	
	The Articles factory will return the result of calling $resource().  That result will allow us to perform CRUD stuff like get, save, and query.

	Here's a breakdown of $resource's arguments.

	$resource(
		// url
		'someurl'
	
		// param defaults (optional)
		{ param: 'defaults'},
	
		// actions (optional)
		{ update: { method: 'PUT' } }
	);

Let's play with the $resource methods.  

	First we have to create a service in /public/js/services.

	Add the reference to /app/views/includes/foot.html.  Restart the server.  Now our service is loaded, but it's not being injected anywhere.

	Inject our service into our controller.

	In the controller, use our factory to call different methods of $resource.

		It looks like subsequent GETs don't do anything if the first one got a 404 as long as the request is the same.  If the url params are different, both requests will go through.  Repetitive POSTs with the same data still go through.

		url params that match tokens in the $resource's path are plugged into the url.

			// service
			$resource('foo/:bar/:baz'
				...
			);

			// controller
			TheFactory.get({
				bar: 111,
				baz: 222
			}, 
				...
			);

			// GET to foo/111/222

			// controller
			TheFactory.get({
				baz: 222
			}, 
				...
			);

			// GET to foo/222

		What is the '@_id' in the $resource?  This is used to look up values in the data being sent in the request to help build the url.
		http://stackoverflow.com/a/17560529/1319850

		example:

			$resource('foo/:bar', {
				{
					bar: '@potato'
				}
			});

			// This POSTs a and b to 'foo'.
			TheFactory.save(
				{
					a: 1,
					b: 2
				}
			);

			// This POSTs a and b to 'foo/666'.
			TheFactory.save(
				{
					a: 1,
					b: 2,
					potato: 666
				}
			);

		The reason the MEAN example uses '@_id' is because the objects, once they're hooked up to a service, will be created by MongoDB, which gives all objects the _id field.